# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r3xl9teGivvtM_Dw0l0GLlP1wRII3oFw
"""


import os

# Tạo file .env
with open(".env", "w") as f:
    f.write("HUBSPOT_API_KEY=pat-na1-d531aa52-b775-4309-8196-e3c61fe93c13\n")
    f.write("OPENAI_API_KEY=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\n")



from pyngrok import ngrok

# Đặt lại mã authtoken chính xác
ngrok.set_auth_token("2pktYbHl2eU3wM1FXrkbaNeyiHh_7WAvSDLbPSXTRrKK3bybB")

# Khởi chạy ngrok
public_url = ngrok.connect(5000)
print(f"Public URL: {public_url}")

from flask import Flask, jsonify
from pyngrok import ngrok

# Khởi tạo ứng dụng Flask
app = Flask(__name__)

# Định nghĩa một route cơ bản
@app.route("/")
def home():
    return "Hello, Flask is running via Ngrok!"

@app.route("/api/test", methods=["GET"])
def api_test():
    return jsonify({"message": "This is a test API endpoint!"})

# Khởi chạy Flask và Ngrok
if __name__ == "__main__":
    # Đặt mã authtoken của Ngrok
    ngrok.set_auth_token("2pktYbHl2eU3wM1FXrkbaNeyiHh_7WAvSDLbPSXTRrKK3bybB")

    # Khởi chạy ngrok trên cổng 5000
    public_url = ngrok.connect(5000)
    print(f"Public URL: {public_url}")

    # Chạy Flask trên localhost:5000
    app.run(port=5000)

from flask import Flask, request, jsonify
import openai

app = Flask(__name__)

# Cài đặt OpenAI API Key
openai.api_key = "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"

@app.route("/", methods=["GET"])
def home():
    return "Bot is running!"

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    user_message = data.get("message", "")

    if not user_message:
        return jsonify({"error": "No message provided"}), 400

    # Gửi yêu cầu đến OpenAI API
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": user_message},
            ]
        )
        reply = response["choices"][0]["message"]["content"]
        return jsonify({"reply": reply})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

with open("bot.py", "w") as file:
    file.write(bot_code)
